apiVersion: v1
kind: Namespace
metadata:
  name: pihole-dns
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-etc-claim
  namespace: pihole-dns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-dnsmasq-claim
  namespace: pihole-dns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-logs-claim
  namespace: pihole-dns
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-custom-dnsmasq
  namespace: pihole-dns
data:
  02-custom.conf: |
    # Allow DNS queries from any source
    interface=*
    bind-interfaces
    log-queries
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  labels:
    app: pihole
  namespace: pihole-dns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name: pihole
          image: pihole/pihole:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
          env:
            - name: TZ
              value: "Australia/Melbourne"
            - name: FTLCONF_webserver_api_password
              value: shouldbechangedafterwards
            - name: FTLCONF_LOCAL_IPV4
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: DNS1
              value: "1.1.1.1"
            - name: DNS2
              value: "8.8.8.8"
            - name: ServerIP # Explicitly set the server IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: 80
              name: pihole-http
              protocol: TCP
            - containerPort: 53
              name: dns
              protocol: TCP
            - containerPort: 53
              name: dns-udp
              protocol: UDP
            - containerPort: 443
              name: pihole-ssl
              protocol: TCP
          volumeMounts:
            - name: pihole-etc-volume
              mountPath: "/etc/pihole"
            - name: pihole-dnsmasq-volume
              mountPath: "/etc/dnsmasq.d"
            - name: pihole-logs-volume
              mountPath: "/var/log"
            - name: custom-dnsmasq
              mountPath: "/etc/dnsmasq.d/02-custom.conf"
              subPath: 02-custom.conf
      volumes:
        - name: pihole-etc-volume
          persistentVolumeClaim:
            claimName: pihole-etc-claim
        - name: pihole-dnsmasq-volume
          persistentVolumeClaim:
            claimName: pihole-dnsmasq-claim
        - name: pihole-logs-volume
          persistentVolumeClaim:
            claimName: pihole-logs-claim
        - name: custom-dnsmasq
          configMap:
            name: pihole-custom-dnsmasq
            items:
              - key: 02-custom.conf
                path: 02-custom.conf
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole-dns
  namespace: pihole-dns
spec:
  ports:
    - name: dns-udp
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
  selector:
    app: pihole
  externalTrafficPolicy: Local
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole-web
  namespace: pihole-dns
spec:
  ports:
    - name: pihole-http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: pihole-https
      port: 443
      protocol: TCP
      targetPort: 443
  selector:
    app: pihole
  externalTrafficPolicy: Local
  type: LoadBalancer
